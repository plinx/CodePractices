=== 744
不合法，class NoDefault 没有默认构造函数，无法初始化。

=== 745
合法，因为 class C 有默认构造函数。

=== 746
(a)错误，不提供的情况下，系统会自己生成默认构造函数
(b)对
(c)错误，当存在其他构造函数时，需要提供默认构造函数
(d)错误，当存在其他构造函数时，无法生成默认构造函数

=== 747
应该使用 explicit
优点：可以检查参数类型是否匹配
缺点：必须有对应的类构造函数，不能对多个参数声明 explicit

=== 748
string null_isbn("9-999"); 	
Sales_data item1(null_isbn);	// string -> Sales_data
Sales_data item2("9-999");	//"9-999" -> string -> Sales_data

若声明 explicit 不影响，因为都属于直接初始化

=== 749
(a)Sales_data &combine(Sales_data);
// string -> Sales_data
(b)Sales_data &combine(Sales_data&);
// string -> Sales_data -> Sales_data&
(c)Sales_data &combine(const Sales_data&) const;
// string -> const string -> const Sales_data -> ..&

=== 750
=== 751
string 常用来转换 char *

=== 752
struct Sales_data {
	std::string bookNo;
	unsigned units_sold;
	double revenue;
};

=== 753
class Debug {
public:
	constexpr Debug(bool b = true) : hw(b), io(b), other(b) {}
	constexpr Debug(bool h, bool i, bool o) : hw(h), io(i), other(o) {}
	constexpr bool any() { return hw || io || other; }
	void set_hw(bool b) { hw = b; }
	void set_io(bool b) { io = b; }
	void set_other(bool b) { other = b; }
private:
	bool hw;
	bool io;
	bool other;
};

=== 754
不应该声明成 constexpr, constexpr 必须有返回值

=== 755
不属于，必须至少含有一个 constexpr 构造函数

=== 756
在成员声明之前加上关键字 static 则为静态成员。
静态成员优点：
不与任何对象绑定在一起，一直存在程序的整个声明周期。
与普通成员的区别：
静态成员能用于不完全类型声明，而普通成员必须是完全类型。

=== 757
class Account {
public:
	void calculate() { amount += amount * interestRate; }
	static double rate() { return interestRate; }
	static void rate(double);
private:
	std::string owner;
	double amount;
	static double interstRate;
	static double initRate();
};

=== 758
// example.h
class Example {
public:
	//static double rate = 6.5;
	static constexpr double rate = 6.5;
	static const int vecSize = 20;
	//static vector<double> vec(vecSize);
	static vector<double> vec;
};
// example.c
#include "example.h"
constexpr double Example::rate;
//vector<double> Example::vec();
vector<double> Example::vec(Example::vecSize);